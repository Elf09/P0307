import os
import json
import base64
import uvicorn
import gspread
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from google.oauth2.service_account import Credentials
from openai import OpenAI
from sheets_handler import get_table_data

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDS_BASE64 = os.getenv("GOOGLE_CREDS_BASE64")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
if not TELEGRAM_TOKEN:
    raise Exception("‚ùå TELEGRAM_TOKEN –ø—É—Å—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Railway!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
creds = None
sheet = None
if GOOGLE_CREDS_BASE64:
    creds_dict = json.loads(base64.b64decode(GOOGLE_CREDS_BASE64))
    scopes = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
    creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
    client_sheet = gspread.authorize(creds)
    sheet = client_sheet.open_by_key(SPREADSHEET_ID).sheet1

# –°–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(TELEGRAM_TOKEN).build()

# Lifespan –¥–ª—è –∑–∞–ø—É—Å–∫–∞
@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await application.initialize()
    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    yield

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_prompt():
    try:
        with open("prompt.txt", "r", encoding="utf-8") as f:
            return f.read()
    except:
        return "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –ü—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –ö—Ä–∏—Å—Ç–∏–Ω–∞! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üéâ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", update.message.text)
    user_question = update.message.text
    table_data = sheet.get_all_values() if sheet else [["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]]
    prompt_base = load_prompt()

    full_prompt = f"""{prompt_base}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_question}"

–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:
{table_data}
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": full_prompt}],
            temperature=0.3,
        )
        reply = response.choices[0].message.content
    except Exception as e:
        reply = f"GPT –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å: {e}"

    await update.message.reply_text(reply)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –°–æ–∑–¥–∞—ë–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(lifespan=lifespan)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return PlainTextResponse("ok")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ webhook:", e)
        return PlainTextResponse("error", status_code=500)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000)
